// Generated by CoffeeScript 1.7.1
(function() {
  var addRouteSegment, calculateObservationPoints, decode, geometry, makeObs, startRoute;

  geometry = require("./geometry");

  decode = function(polyStr) {
    var b, dlat, dlng, index, lat, len, lng, pointsList, result, shift;
    index = 0;
    len = polyStr.length;
    lat = 0;
    lng = 0;
    pointsList = [];
    while (index < len) {
      b = 0;
      shift = 0;
      result = 0;
      b = polyStr.charCodeAt(index) - 63;
      index++;
      result |= (b & 0x1f) << shift;
      shift += 5;
      while (b >= 0x20) {
        b = polyStr.charCodeAt(index) - 63;
        index++;
        result |= (b & 0x1f) << shift;
        shift += 5;
      }
      dlat = (result & 1) !== 0 ? ~(result >> 1) : result >> 1;
      lat += dlat;
      shift = 0;
      result = 0;
      b = polyStr.charCodeAt(index) - 63;
      index++;
      result |= (b & 0x1f) << shift;
      shift += 5;
      while (b >= 0x20) {
        b = polyStr.charCodeAt(index) - 63;
        index++;
        result |= (b & 0x1f) << shift;
        shift += 5;
      }
      dlng = (result & 1) !== 0 ? ~(result >> 1) : result >> 1;
      lng += dlng;
      pointsList.push({
        lat: lat / 1e5,
        lng: lng / 1e5
      });
    }
    return pointsList;
  };

  startRoute = function() {
    return [];
  };

  addRouteSegment = function(polyline) {
    var distance, end, heading, i, pointsList, route, start, _i, _len;
    route = [];
    pointsList = decode(polyline);
    console.log("Found " + pointsList.length + " points in " + polyline);
    for (i = _i = 0, _len = pointsList.length; _i < _len; i = ++_i) {
      start = pointsList[i];
      if (!(i >= pointsList.length - 1)) {
        end = pointsList[i + 1];
        heading = geometry.getHeading(start, end);
        distance = geometry.getDistance(start, end);
        route.push({
          start: start,
          end: end,
          heading: heading,
          distance: distance
        });
      }
    }
    return route;
  };

  makeObs = function(location, heading) {
    return {
      location: location,
      forwardHeading: heading
    };
  };

  calculateObservationPoints = function(fullRoute, legDistance) {
    var currentLegDistance, obsPointsList, position, _i, _len;
    obsPointsList = [];
    currentLegDistance = legDistance + 1;
    for (_i = 0, _len = fullRoute.length; _i < _len; _i++) {
      position = fullRoute[_i];
      if (currentLegDistance > legDistance) {
        currentLegDistance = 0;
        obsPointsList.push(makeObs(position.start, position.heading));
      } else {
        currentLegDistance += position.distance;
      }
    }
    return obsPointsList;
  };

  this.parseRoute = function(routeJson) {
    var leg, obsPointsList, routeLegs, section, step, _i, _j, _len, _len1, _ref, _ref1;
    routeLegs = startRoute();
    _ref = routeJson.routes[0].legs;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      leg = _ref[_i];
      if (leg.steps != null) {
        _ref1 = leg.steps;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          step = _ref1[_j];
          if ((step.polyline != null) && (step.polyline.points != null)) {
            section = addRouteSegment(step.polyline.points);
            routeLegs = routeLegs.concat(section);
          }
        }
      }
    }
    console.log(routeLegs.length);
    obsPointsList = calculateObservationPoints(routeLegs, 0.01);
    return obsPointsList;
  };

}).call(this);
