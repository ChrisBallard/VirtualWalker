// Generated by CoffeeScript 1.7.1
(function() {
  var config, http, parseRespForErr, querystring, request,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  http = require("http");

  request = require("request");

  querystring = require("querystring");

  config = require("../config").data();

  this.Url = (function() {
    function Url(protocol, host, path) {
      this.protocol = protocol;
      this.host = host;
      this.path = path;
      this.toString = __bind(this.toString, this);
    }

    Url.prototype.toString = function() {
      return "" + this.protocol + "://" + this.host + this.path;
    };

    return Url;

  })();

  parseRespForErr = function(response) {
    switch (false) {
      case !(response.statusCode >= 500):
        return "Server error " + response.statusCode;
      case response.statusCode !== 400:
        return "Bad request";
      case response.statusCode !== 401:
        return "Unauthorized";
      case response.statusCode !== 403:
        return "Forbidden";
      case response.statusCode !== 404:
        return "Not found";
      case response.statusCode !== 407:
        return "Proxy authentication required";
      case !(response.statusCode > 400):
        return "Client error " + response.statusCode;
      default:
        return null;
    }
  };

  this.getJson = function(url, completion) {
    var callback;
    callback = (function(_this) {
      return function(err, response, body) {
        var outerErr;
        outerErr = parseRespForErr(response);
        if ((outerErr != null) || (err != null)) {
          return completion("" + outerErr + "[" + err + "]", response, null);
        } else {
          return completion(null, response, JSON.parse(response.body));
        }
      };
    })(this);
    return request(url.toString(), callback);
  };

  this.getResponse = function(url, completion) {
    var callback, options;
    options = {
      host: url.host,
      path: url.path
    };
    callback = (function(_this) {
      return function(response) {
        var outerErr;
        outerErr = parseRespForErr(response);
        if (outerErr != null) {
          return completion(outerErr, response);
        } else {
          return completion(null, response);
        }
      };
    })(this);
    return http.request(options, callback).end();
  };

  this.shortenUrl = function(url, done) {
    var doneShortening, qs, shortenerUrl;
    qs = querystring.stringify({
      longUrl: url.toString(),
      apiKey: config.shortenerKey
    });
    shortenerUrl = new web.Url("http", config.shortener, "/admin/api/add?" + qs);
    doneShortening = (function(_this) {
      return function(err, response, resJson) {
        if (err == null) {
          if (!resJson || !resJson.shortUrl) {
            return done(null);
          } else {
            return done(resJson.shortUrl);
          }
        } else {
          return done(null);
        }
      };
    })(this);
    return this.getJson(shortenerUrl, doneShortening);
  };

}).call(this);
