// Generated by CoffeeScript 1.7.1
(function() {
  var UserSession, UserWaypoint, config, mongoose;

  config = require("../config").data();

  mongoose = require("mongoose");

  UserWaypoint = null;

  UserSession = null;

  this.getSession = function(username, done) {
    return UserSession.findOne({
      userName: username
    }, (function(_this) {
      return function(err, userSession) {
        if ((err != null) || (userSession == null)) {
          return done({
            userName: username
          });
        } else {
          return done(userSession);
        }
      };
    })(this));
  };

  this.saveSession = function(userSession, done) {
    return UserSession.findOne({
      userName: userSession.userName
    }, (function(_this) {
      return function(err, existingSession) {
        if ((err != null) || (existingSession == null)) {
          existingSession = new UserSession(userSession);
        } else {
          existingSession.blogText = userSession.blogText;
        }
        return existingSession.save(function(err, obj) {
          if (err != null) {
            return done(err);
          } else {
            return done(null);
          }
        });
      };
    })(this));
  };

  this.init = function() {
    mongoose.connect(config.mongo);
    UserWaypoint = mongoose.model('UserWaypoint', {
      userName: {
        type: String,
        required: true,
        unique: true
      },
      milesSoFar: {
        type: Number,
        required: true
      },
      lastCoord: {
        type: String,
        required: true
      }
    });
    UserSession = mongoose.model('UserSession', {
      userName: {
        type: String,
        required: true,
        unique: true
      },
      blogText: {
        type: String,
        required: false
      },
      route: {
        type: String,
        required: false
      },
      stepsToday: {
        type: Number,
        required: false
      },
      milesToday: {
        type: Number,
        required: false
      },
      walkingDate: {
        type: Date,
        required: false
      }
    });
    return null;
  };

}).call(this);
